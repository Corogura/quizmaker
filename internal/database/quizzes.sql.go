// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quizzes.sql

package database

import (
	"context"
	"database/sql"
)

const createQuiz = `-- name: CreateQuiz :exec
INSERT INTO quizzes (id, created_at, updated_at, title, user_id, path)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateQuizParams struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Title     string
	UserID    string
	Path      string
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) error {
	_, err := q.db.ExecContext(ctx, createQuiz,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.UserID,
		arg.Path,
	)
	return err
}

const createQuizQuestions = `-- name: CreateQuizQuestions :exec
INSERT INTO quiz_questions (id, quiz_id, question_number, question_text, choice1, choice2, choice3, choice4, answer)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateQuizQuestionsParams struct {
	ID             string
	QuizID         string
	QuestionNumber int64
	QuestionText   string
	Choice1        string
	Choice2        string
	Choice3        string
	Choice4        string
	Answer         int64
}

func (q *Queries) CreateQuizQuestions(ctx context.Context, arg CreateQuizQuestionsParams) error {
	_, err := q.db.ExecContext(ctx, createQuizQuestions,
		arg.ID,
		arg.QuizID,
		arg.QuestionNumber,
		arg.QuestionText,
		arg.Choice1,
		arg.Choice2,
		arg.Choice3,
		arg.Choice4,
		arg.Answer,
	)
	return err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
UPDATE quizzes SET deleted_at = ? WHERE id = ?
`

type DeleteQuizParams struct {
	DeletedAt sql.NullString
	ID        string
}

func (q *Queries) DeleteQuiz(ctx context.Context, arg DeleteQuizParams) error {
	_, err := q.db.ExecContext(ctx, deleteQuiz, arg.DeletedAt, arg.ID)
	return err
}

const deleteQuizQuestion = `-- name: DeleteQuizQuestion :exec
UPDATE quiz_questions SET deleted_at = ? WHERE id = ?
`

type DeleteQuizQuestionParams struct {
	DeletedAt sql.NullString
	ID        string
}

func (q *Queries) DeleteQuizQuestion(ctx context.Context, arg DeleteQuizQuestionParams) error {
	_, err := q.db.ExecContext(ctx, deleteQuizQuestion, arg.DeletedAt, arg.ID)
	return err
}

const getAllQuestionsInQuiz = `-- name: GetAllQuestionsInQuiz :many
SELECT id, quiz_id, question_number, question_text, choice1, choice2, choice3, choice4, answer, deleted_at FROM quiz_questions WHERE quiz_id = ? AND deleted_at IS NULL ORDER BY question_number ASC
`

func (q *Queries) GetAllQuestionsInQuiz(ctx context.Context, quizID string) ([]QuizQuestion, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuestionsInQuiz, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuizQuestion
	for rows.Next() {
		var i QuizQuestion
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.QuestionNumber,
			&i.QuestionText,
			&i.Choice1,
			&i.Choice2,
			&i.Choice3,
			&i.Choice4,
			&i.Answer,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllQuizzesByUserID = `-- name: GetAllQuizzesByUserID :many
SELECT id, created_at, updated_at, title, user_id, path, deleted_at FROM quizzes WHERE user_id = ? AND deleted_at IS NULL ORDER BY updated_at DESC
`

func (q *Queries) GetAllQuizzesByUserID(ctx context.Context, userID string) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuizzesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.UserID,
			&i.Path,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestionCountInQuiz = `-- name: GetQuestionCountInQuiz :one
SELECT COUNT(*) AS question_count FROM quiz_questions WHERE quiz_id = ?
`

func (q *Queries) GetQuestionCountInQuiz(ctx context.Context, quizID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getQuestionCountInQuiz, quizID)
	var question_count int64
	err := row.Scan(&question_count)
	return question_count, err
}

const getQuestionFromQuestionNumber = `-- name: GetQuestionFromQuestionNumber :one
SELECT id, quiz_id, question_number, question_text, choice1, choice2, choice3, choice4, answer, deleted_at FROM quiz_questions WHERE id = ? AND quiz_id = ?
`

type GetQuestionFromQuestionNumberParams struct {
	ID     string
	QuizID string
}

func (q *Queries) GetQuestionFromQuestionNumber(ctx context.Context, arg GetQuestionFromQuestionNumberParams) (QuizQuestion, error) {
	row := q.db.QueryRowContext(ctx, getQuestionFromQuestionNumber, arg.ID, arg.QuizID)
	var i QuizQuestion
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.QuestionNumber,
		&i.QuestionText,
		&i.Choice1,
		&i.Choice2,
		&i.Choice3,
		&i.Choice4,
		&i.Answer,
		&i.DeletedAt,
	)
	return i, err
}

const getQuiz = `-- name: GetQuiz :one
SELECT quizzes.id, created_at, updated_at, title, user_id, path, quizzes.deleted_at, quiz_questions.id, quiz_id, question_number, question_text, choice1, choice2, choice3, choice4, answer, quiz_questions.deleted_at FROM quizzes JOIN quiz_questions ON quizzes.id = quiz_questions.quiz_id
WHERE quizzes.id = ?
`

type GetQuizRow struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Title          string
	UserID         string
	Path           string
	DeletedAt      sql.NullString
	ID_2           string
	QuizID         string
	QuestionNumber int64
	QuestionText   string
	Choice1        string
	Choice2        string
	Choice3        string
	Choice4        string
	Answer         int64
	DeletedAt_2    sql.NullString
}

func (q *Queries) GetQuiz(ctx context.Context, id string) (GetQuizRow, error) {
	row := q.db.QueryRowContext(ctx, getQuiz, id)
	var i GetQuizRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.UserID,
		&i.Path,
		&i.DeletedAt,
		&i.ID_2,
		&i.QuizID,
		&i.QuestionNumber,
		&i.QuestionText,
		&i.Choice1,
		&i.Choice2,
		&i.Choice3,
		&i.Choice4,
		&i.Answer,
		&i.DeletedAt_2,
	)
	return i, err
}

const getQuizIDFromPath = `-- name: GetQuizIDFromPath :one
SELECT id, user_id, deleted_at FROM quizzes WHERE path = ?
`

type GetQuizIDFromPathRow struct {
	ID        string
	UserID    string
	DeletedAt sql.NullString
}

func (q *Queries) GetQuizIDFromPath(ctx context.Context, path string) (GetQuizIDFromPathRow, error) {
	row := q.db.QueryRowContext(ctx, getQuizIDFromPath, path)
	var i GetQuizIDFromPathRow
	err := row.Scan(&i.ID, &i.UserID, &i.DeletedAt)
	return i, err
}

const updateQuizTitle = `-- name: UpdateQuizTitle :exec
UPDATE quizzes SET title = ?, updated_at = ? WHERE id = ?
`

type UpdateQuizTitleParams struct {
	Title     string
	UpdatedAt string
	ID        string
}

func (q *Queries) UpdateQuizTitle(ctx context.Context, arg UpdateQuizTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateQuizTitle, arg.Title, arg.UpdatedAt, arg.ID)
	return err
}
