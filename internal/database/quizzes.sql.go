// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: quizzes.sql

package database

import (
	"context"
)

const createQuiz = `-- name: CreateQuiz :exec
INSERT INTO quizzes (id, created_at, updated_at, title, user_id, path)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
`

type CreateQuizParams struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Title     string
	UserID    string
	Path      string
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) error {
	_, err := q.db.ExecContext(ctx, createQuiz,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.UserID,
		arg.Path,
	)
	return err
}

const createQuizQuestions = `-- name: CreateQuizQuestions :exec
INSERT INTO quiz_questions (id, quiz_id, question_text, choices)
VALUES (
    ?,
    ?,
    ?,
    ?
)
`

type CreateQuizQuestionsParams struct {
	ID           string
	QuizID       string
	QuestionText string
	Choices      string
}

func (q *Queries) CreateQuizQuestions(ctx context.Context, arg CreateQuizQuestionsParams) error {
	_, err := q.db.ExecContext(ctx, createQuizQuestions,
		arg.ID,
		arg.QuizID,
		arg.QuestionText,
		arg.Choices,
	)
	return err
}

const getQuiz = `-- name: GetQuiz :one
SELECT quizzes.id, created_at, updated_at, title, user_id, path, quiz_questions.id, quiz_id, question_text, choices FROM quizzes JOIN quiz_questions ON quizzes.id = quiz_questions.quiz_id
WHERE quizzes.id = ?
`

type GetQuizRow struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	Title        string
	UserID       string
	Path         string
	ID_2         string
	QuizID       string
	QuestionText string
	Choices      string
}

func (q *Queries) GetQuiz(ctx context.Context, id string) (GetQuizRow, error) {
	row := q.db.QueryRowContext(ctx, getQuiz, id)
	var i GetQuizRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.UserID,
		&i.Path,
		&i.ID_2,
		&i.QuizID,
		&i.QuestionText,
		&i.Choices,
	)
	return i, err
}
